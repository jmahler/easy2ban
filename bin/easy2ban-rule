#!/usr/bin/perl
use strict;
use Getopt::Long;
use YAML qw(LoadFile);
use Sys::Syslog qw(:standard);

=head1 easy2ban-rule

easy2ban-rule will monitor a log file or some other program
and look for pattern (rule) matches.  When matches are found
it "bans" the IP by writting the ban time to a file.
Another program will take care of enforcing the ban.

Normally this program is run using /etc/init.d/easy2ban.
But it can also be run directly.

    $ easy2ban-rule -c /etc/easy2ban/easy2ban.conf \
                    -c /etc/easy2ban/rules-available/easy2ban-local

=cut

my @cfg_files;
my $help;
GetOptions ("config=s" 	=> \@cfg_files,
			"help" 		=> \$help );

# Load all the config files.
# Later options override earlier.
my %cfg;
foreach my $file (@cfg_files) {
	my $xcfg = LoadFile($file);
	%cfg = (%cfg, %$xcfg);
}

$|=1;  # autoflush STDOUT, it is used for logging

# {{{ check config options

usage() and exit 0 if ($help);

unless (@cfg_files) {
	usage();
	print STDERR "Some config files need to be given (-c).\n";
	exit 1;
}

# require that these options be defined
foreach my $key (qw(LOG_FACILITY BAN_DIR BAN_TIME MONITOR_TIME MAX_HITS RULES NAME)) {
	if (! exists $cfg{$key}) {
		print STDERR "'$key' must be defined.\n";
		exit 1;
	}
}

unless (-d $cfg{BAN_DIR}) {
	print STDERR "The ban directory (BAN_DIR), '"
				. $cfg{BAN_DIR} . "', does not exist.\n"
				. "  Please create it and try again.\n";
	exit 1;
}

if ($cfg{MONITOR_TIME} > 60) {
	print STDERR "MONITOR_TIME longer than 60 minutes is not supported.\n";
	exit 1;
}

unless ($cfg{BAN_TIME} > 0) {
	print STDERR "BAN_TIME must be greater than zero.\n";
	exit 1;
}

my $input;
open($input, $cfg{CMD})
	or die "Open (CMD) '" . $cfg{CMD} . "' failed: $!\n";

my @rules;
foreach my $rule_str (@{$cfg{RULES}}) {
	push @rules, (qr/$rule_str/);
}

# syslog options
my $ident = $cfg{NAME};
my $facility = $cfg{LOG_FACILITY};
my $logopt = "ndelay,pid";
openlog($ident, $logopt, $facility);

# }}}

# Journal of IPs that have broken rules
my %journal;
#  %journal = (
#     ip => [<hits at minute 0>, <hits at minute 1> ..., <... n>]
#  );

syslog('info', 'start');

my $cur_minute = (localtime(time))[1];
while (my $line = <$input>) {
	chomp($line);

	# Rate is calculated based on minutes of data.

	# Shift the journal of hit counts according to the
	# number of minutes that have elapsed.
	my $minute = (localtime(time))[1];
	while ($cur_minute != $minute) {

		# shift data ...
		foreach my $ip (keys %journal) {
			my $entry = $journal{$ip};

			# create new entry with zero
			unshift @$entry, (0);

			# discard oldest if beyond interval
			if (@$entry > $cfg{MONITOR_TIME}) {
				pop @$entry;
			}
		}

		# increment but loop at 60 minutes
		if ($cur_minute < 59) {
			$cur_minute++;
		} else {
			$cur_minute = 0;
		}
	}

	# Check all the rules
	my $no_hits = 1;
	foreach my $rule (@rules) {
		# If one has been broken
		if ($line =~ $rule) {
			my $ip = get_ip($line);

			# skip if ip could not be found
			if (! defined $ip) {
				last;
			}

			$no_hits = 0;

			# record hit on this IP
			if (exists $journal{$ip}) {
				($journal{$ip}->[0])++;
			} else {
				# add initial entry
				$journal{$ip} = [1];
			}

			last;
		}
	}
	next if ($no_hits);

	# Recalculate counts, ban ips
	foreach my $ip (keys %journal) {

		my $hits = $journal{$ip};
		my $sum = 0;
		foreach my $hit (@$hits) {
			$sum += $hit;
		}

		if (0 == $sum) {
			delete $journal{$ip};
			next;
		}

		if ($sum > $cfg{MAX_HITS}) {
			syslog('info', "request ban of $ip for $cfg{BAN_TIME} minutes");
			ban($ip, $cfg{BAN_DIR}, $cfg{BAN_TIME});
			delete $journal{$ip};
		}
	}
}

closelog();

=head2 get_ip()

Given a line from a log file containing an IPv4 address

  66.249.73.80 - - [05/Mar/2014:20:29:32 -0600] "GET / HTTP/1.1" 200 425 "-" "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"

try to extract the ip address and return it as a string.
If no address is found, return undef.

=cut

sub get_ip {
	my ($line) = @_;

	if ($line =~ /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/) {
		return $1;
	}

	return;
}

=head2 ban()

An IP is "banned" by writing a ban time (in minutes) to a
file whose name is the IP address.

  $ cat var/ban/192.168.2.1
  5

Some other program should monitor this directory, apply
the ban rule, and remove the ban file after the interval
is finished.

=cut

sub ban {
	my ($ip, $ban_dir, $ban_time) = @_;

	my $ban_file = "$ban_dir/$ip";

	my $ban_fh;
	my $res;

	if (! -e $ban_file) {
		if (!open ($ban_fh, ">", $ban_file)) {
			print STDERR "Unable to create ban file '$ban_file': $!\n";
			return;
		}
		print $ban_fh "$ban_time\n";
		close $ban_fh;

		# notify the ban daemon that there is a new ban
		`killall -HUP easy2ban-ipban 2>&1 1>/dev/null`;
	} else {
		if (!open ($ban_fh, "+<", $ban_file)) {
			print STDERR "Unable to open ban file '$ban_file': $!\n";
			return;
		}

		# Get the remaining ban time
		my $cur_ban_time = <$ban_fh>;
		chomp($cur_ban_time);
	
		# write our time if it is longer
		if ($ban_time > $cur_ban_time) {
			truncate $ban_fh, 0;
			seek $ban_fh, 0, 0;
	
			print $ban_fh "$ban_time\n";
		}

		close $ban_fh;
	}
}

sub usage {
	print STDERR <<"EOF";

  usage: $0 -c <config file>

    -c <file>       : Config file to read settings from.
                      -c can be specified multiple times.
                      Latter settings override earlier.

    -h              : help

EOF
}

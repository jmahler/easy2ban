#!/usr/bin/perl
use strict;
use Getopt::Std;

=head1 easy2ban-ipban

The easy2ban-ipban daemon monitors a ban directory and
bans IPs by creating iptables rules that drop packets from
that IP.

  easy2ban-ipban -d "var/bin" -v

It assumes that there is some other daemon (easy2ban) that
is creating the ban files and storing the ban time in minutes.

The operation of this daemon is quite simple.
It looks at all the ban (IP) files in the ban directory and
bans any that still have time left.  It decrements the time
left of each as well.  When the ban time expires it un-bans the
IP and removes the ban (IP) file.  Then it sleeps for 1 minute
and afterwards repeats the process again.

=cut

my %opt;
getopts('d:i:vsh', \%opt) or usage();
usage() if $opt{h};

# Command line options
my $ban_dir = (exists $opt{'d'}) ? $opt{'d'} : "var/ban";	# ban directory
my $verbose = $opt{'v'};
my $step = $opt{'s'};
my $ban_chain = (exists $opt{'i'}) ? $opt{'i'} : "easy2ban";

unless (-d $ban_dir) {
	print STDERR "The ban directory, '$ban_dir', does not exist.\n"
				. "  Please create it and try again.\n";
	exit 1;
}

# Make sure our ban chain exists, create it if it doesn't
my $exists = `sudo iptables -nL $ban_chain 2>&1`;
# iptables: No chain/target/match by that name.
if ($exists =~ /No chain/) {
	print "creating easy2ban chain\n" if $verbose;
	`sudo iptables -N $ban_chain`;
	`sudo iptables -A $ban_chain -j RETURN`;
	`sudo iptables -I INPUT -j $ban_chain`;
}
# to delete:
# iptables -F easy2ban
# iptables -D INPUT -j easy2ban
# iptables -X easy2ban

# main loop:
#
#   - decrement the ban times in files every minute, delete expired
#   - keep the ban files in sync with the iptables ban rules
#
while (1) {

	decrement_banfiles($ban_dir);

	my @iptables_ips = get_iptables_ips($ban_chain);
	my @banfile_ips = get_banfile_ips($ban_dir);

	# make sure all banfiles are represented in iptables
	print "ban files\n" if ($verbose and @banfile_ips);
	foreach my $banfile_ip (@banfile_ips) {
		print "  $banfile_ip\n" if $verbose;
		if (grep { ($_ eq $banfile_ip) } @iptables_ips) {
			# already banned, OK
		} else {
			ipban($banfile_ip);
		}
	}

	# make sure there are no iptables entries without a ban file
	print "iptables:\n" if ($verbose and @iptables_ips);
	foreach my $iptables_ip (@iptables_ips) {
		print "  $iptables_ip\n" if $verbose;
		if (grep { $_ eq $iptables_ip } @banfile_ips) {
			# already banned, OK
		} else {
			ipunban($iptables_ip);
		}
	}

	if ($step) {
		print "press enter to recalculate\n";
		<STDIN>
	} else {
		print "sleep 1 minute\n" if $verbose;
		sleep 60;  # 1 minute
	}
}

=head2 decrement_banfiles

Decrement the ban time by one minute in each of the ban files.

=cut

sub decrement_banfiles {
	my ($ban_dir) = @_;

	my $dh;
	if (! opendir $dh, $ban_dir) {
		print STDERR "Couldn't open ban directory '$ban_dir': $!";
		return 1;
	}

	my @ips = readdir $dh;

	# decriment the banfile times, delete if expired
	foreach my $ip (@ips) {

		# skip unexpected file names
		next if ($ip !~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/);

		my $ip_fh;
		if (! open($ip_fh, "+<", "$ban_dir/$ip")) {
			print STDERR "Unable to open '$ban_dir/$ip': $!";
			next;
		}
		# read the minutes left
		my $min = <$ip_fh>;
		chomp($min);

		if ($min <= 0) {
			# if zero minutes left, delete the file
			close $ip_fh;
			if (! unlink "$ban_dir/$ip") {
				print STDERR "Unable to unlink '$ban_dir/$ip': $!";
			}
		} else {
			# otherwise decrement the minutes left

			truncate $ip_fh, 0;  # discard current contents
			seek $ip_fh, 0, 0;  # to beginning

			$min = $min - 1;

			print $ip_fh "$min\n";
		}

		close $ip_fh;
	}

	closedir $dh;
}

=head2 get_iptables_ips

Get the currently banned IP addresses stored in our easy2ban chain.

=cut

sub get_iptables_ips {
	my ($ban_chain) = @_;

	my $raw = `sudo iptables -nL $ban_chain 2>&1`;
	my @lines = split /\n/, $raw;

	my @ips;
	foreach my $line (@lines) {
		next if $line =~ /RETURN/;
		if ($line =~ /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/) {
			print "LINE: '$line'\n";
			push @ips, $1;
		}
	}

	return @ips;
}

=head2 get_iptables_ips

Get a list of all the current IP addresses in the ban files.

=cut

sub get_banfile_ips {
	my ($ban_dir) = @_;

	my $dh;
	if (! opendir $dh, $ban_dir) {
		print STDERR "Couldn't open ban directory '$ban_dir': $!";
		return ();
	}

	my @ips;
	my @files = readdir $dh;

	foreach my $file (@files) {
		# skip file name is not an ip address
		next if ($file !~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/);

		push @ips, $file;
	}

	closedir $dh;

	return @ips;
}

=head2 ipban(), ipunban()

ipban() bans an IP address by inserting a -j DROP rule using iptables.

ipunban() does the inverse of ipban() and released the IP.

=cut

sub ipban {
	my ($ip) = @_;

	# It is assumed that exists of the banned chain has already
	# been checked and is available.

	# check if it is currently banned
	my $is_banned = `sudo iptables -nL $ban_chain | grep $ip`;
	if ($is_banned) {
		print "$ip is already banned\n" if $verbose;
		return;
	} else {
		print "$ip banned (new)\n" if $verbose;
		`sudo iptables -I $ban_chain -s $ip -j DROP`;
	}
}

sub ipunban {
	my ($ip) = @_;

	print "unban: $ip\n" if $verbose;
	`sudo iptables -D $ban_chain -s $ip -j DROP 2>&1`;
}

sub usage {
	print STDERR <<"EOF";

  usage: $0 -d "var/bin" [-i "easy2ban"] [-v] [-s] [-h]

    -d "var/bin"    : directory where ban files are stored

    -i "easy2ban"   : name of iptables chain to store rules

    -v              : verbose output

    -s              : stop and wait for user input before recalculating

    -h              : help

EOF
	exit;
}
